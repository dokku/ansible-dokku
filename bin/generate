#!/usr/bin/env python
import ast
import os
import yaml


def represent_none(self, _):
    return self.represent_scalar("tag:yaml.org,2002:null", "")


yaml.add_representer(type(None), represent_none)


def section_header(text, level=1):
    return "{0} {1}".format("#" * level, text)


def get_libraries(role_path):
    libraries_path = os.path.join(role_path, "library")
    files = []
    for (dirpath, dirnames, filenames) in os.walk(libraries_path):
        files.extend(filenames)
        break

    data = {}
    for f in files:
        data[f] = {}
        M = ast.parse("".join(open(os.path.join(libraries_path, f))))
        for child in M.body:
            if isinstance(child, ast.Assign):
                for t in child.targets:
                    theid = None
                    try:
                        theid = t.id
                    except AttributeError:
                        print("Failed to assign id for %s on %s, skipping" % (t, f))
                        continue
                    if "DOCUMENTATION" == theid:
                        data[f]["docs"] = yaml.load(
                            child.value.s[1:].strip(), Loader=yaml.SafeLoader
                        )
                    elif "EXAMPLES" == theid:
                        data[f]["examples"] = child.value.s[1:].strip()

    return data


def add_table_of_contents(text):
    text.append(section_header("Table Of Contents", 2))
    text.append(
        "\n".join(
            [
                "- [Requirements](#requirements)",
                "- [Dependencies](#dependencies)",
                "- [Role Variables](#role-variables)",
                "- [Libraries](#libraries)",
                "- [Example Playbooks](#example-playbooks)",
                "- [Contributing](#contributing)",
                "- [License](#license)",
            ]
        )
    )
    return text


def add_libraries(text, role_path):
    libraries = get_libraries(role_path)

    def chosen(choice, default):
        if choice == default:
            return "**{0}** (default)".format(choice)
        return "{0}".format(choice)

    library_keys = sorted(libraries.keys())
    text.append(section_header("Libraries", 2))
    for library in library_keys:
        data = libraries[library]
        options = [
            "|Parameter|Choices/Defaults|Comments|",
            "|---------|----------------|--------|",
        ]

        option_keys = sorted(data["docs"].get("options", {}).keys())
        for parameter in option_keys:
            config = data["docs"]["options"][parameter]
            choices = config.get("choices", [])
            default = config.get("default", None)

            choice_default = []
            if len(choices) > 0:
                choices = [
                    "<li>{0}</li>".format(chosen(choice, default)) for choice in choices
                ]
                choice_default.append(
                    "*Choices:* <ul>{0}</ul>".format("".join(choices))
                )
            elif default is not None:
                choice_default.append("*Default:* {0}".format(default))

            title = parameter
            if config.get("required", False):
                title = "{0}<br /><sup>*required*</sup>".format(parameter)

            options.append(
                "|{0}|{1}|{2}|".format(
                    title,
                    "\n".join(choice_default),
                    "<br />".join(config.get("description")).strip(),
                )
            )

        text.append(section_header(data["docs"]["module"], 3))
        text.append(data["docs"]["short_description"])

        requirements = data["docs"].get("requirements", [])
        if len(requirements) > 0:
            text.append(section_header("Requirements", 4))
            requirements = ["- {0}".format(r) for r in requirements]
            text.append("{0}".format("\n".join(requirements)))

        if len(options) > 0:
            text.append(section_header("Parameters", 4))
            text.append("\n".join(options))

        text.append(section_header("Example", 4))
        text.append("```yaml\n{0}\n```".format(data["examples"].strip()))

    return text


def add_requirements(text, meta, defaults):
    text.append(section_header("Requirements", 2))
    text.append(
        "Minimum Ansible Version: {0}".format(
            meta["galaxy_info"]["min_ansible_version"]
        )
    )

    if len(meta["galaxy_info"]["platforms"]) > 0:
        text.append(section_header("Platform Requirements", 3))
        text.append("Supported Platforms")
        platforms = []
        for platform in meta["galaxy_info"]["platforms"]:
            for v in platform["versions"]:
                platforms.append("- {0}: {1}".format(platform["name"], v))
        text.append("\n".join(platforms))

    text.append(section_header("Dependencies", 2))
    dependencies = []
    if len(meta["dependencies"]) > 0:
        dependencies = [
            "- {0} ansible role".format(dependency)
            for dependency in meta["dependencies"]
        ]
    dependencies.append("- Dokku (for library usage)")
    text.append("\n".join(dependencies))

    return text


def add_variables(text, role_path):
    defaults = {}
    defaults_file = os.path.join(role_path, "defaults", "main.yml.base")
    with open(defaults_file) as f:
        defaults = yaml.load(f.read(), Loader=yaml.SafeLoader)

    if len(defaults) > 0:
        text.append(section_header("Role Variables", 2))
        variables = sorted(defaults.keys())
        for variable in variables:
            config = defaults[variable]
            header_text = "{0}".format(variable)
            if config.get("deprecated", False):
                header_text += " (deprecated)"
            text.append(section_header(header_text, 3))

            # Note: there doesn't seem to be a straighforward way of mapping a python value to its yaml representation
            # without getting a whole yaml document back. See https://stackoverflow.com/questions/28376530
            default_str = config["default"]
            if default_str == "":
                default_str = "''"
            elif default_str is None:
                default_str = "null"

            text.append(
                "- default: `{0}`\n- type: `{1}`\n- description: {2}".format(
                    default_str, config["type"], config["description"].strip()
                )
            )

    return text


def add_examples(text, role_path):
    examples = {}
    examples_file = os.path.join(role_path, "example.yml")
    with open(examples_file) as f:
        examples = yaml.load(f.read(), Loader=yaml.SafeLoader)["examples"]

    text.append(section_header("Example Playbooks", 2))
    for e in examples:
        text.append(section_header(e["name"], 3))
        text.append("```yaml\n{0}\n```".format(e["example"].strip()))

    return text


def generate_readme():
    role_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

    meta = {}
    meta_file = os.path.join(role_path, "meta", "main.yml")
    with open(meta_file) as f:
        meta = yaml.load(f.read(), Loader=yaml.SafeLoader)

    defaults = {}
    defaults_file = os.path.join(role_path, "defaults", "main.yml")
    with open(defaults_file) as f:
        defaults = yaml.load(f.read(), Loader=yaml.SafeLoader)

    text = []
    text.append(section_header("Ansible Role: Dokku"))
    text.append(
        "[![Ansible Role](https://img.shields.io/ansible/role/39276.svg)](https://galaxy.ansible.com/dokku_bot/ansible_dokku) "
        + "[![Release](https://img.shields.io/github/release/dokku/ansible-dokku.svg)](https://github.com/dokku/ansible-dokku/releases) "
        + "[![Build Status](https://github.com/dokku/ansible-dokku/workflows/CI/badge.svg)](https://github.com/dokku/ansible-dokku/actions)"
    )

    text.append(meta["galaxy_info"]["description"])

    text = add_table_of_contents(text)
    text = add_requirements(text, meta, defaults)
    text = add_variables(text, role_path)
    text = add_libraries(text, role_path)
    text = add_examples(text, role_path)

    text.append(section_header("Contributing", 2))
    text.append("See [CONTRIBUTING.md](./CONTRIBUTING.md).")

    text.append(section_header("License", 2))
    text.append(meta["galaxy_info"]["license"])
    if os.path.isfile(os.path.join(role_path, "LICENSE.md")):
        text.append("See LICENSE.md for further details.")

    readme_file = os.path.join(role_path, "README.md")
    with open(readme_file, "w") as f:
        f.write("\n\n".join(text) + "\n")


def generate_defaults():
    role_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    defaults_base_file = os.path.join(role_path, "defaults", "main.yml.base")

    defaults_base = {}
    with open(defaults_base_file) as f:
        defaults_base = yaml.load(f.read(), Loader=yaml.SafeLoader)

    defaults = {}
    if len(defaults_base) > 0:
        for variable, config in defaults_base.items():
            if config["default"] is None and not config["templated"]:
                continue
            defaults[variable] = config["default"]

    defaults_file = os.path.join(role_path, "defaults", "main.yml")
    with open(defaults_file, "w") as f:
        f.write(yaml.dump(defaults, explicit_start=False))


def generate_requirements():
    role_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

    meta = {}
    meta_file = os.path.join(role_path, "meta", "main.yml")
    with open(meta_file) as f:
        meta = yaml.load(f.read(), Loader=yaml.SafeLoader)

    with open(os.path.join(role_path, "ansible-role-requirements.yml"), "w") as f:
        yaml.dump(meta["dependencies"], f, explicit_start=True)


def main():
    generate_defaults()
    generate_readme()
    generate_requirements()


if __name__ == "__main__":
    main()
